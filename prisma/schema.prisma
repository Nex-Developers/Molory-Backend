// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id        Int       @id @default(autoincrement())
  name      String
  language  String
  currency  String
  phoneCode String
  longitude Float
  latitude  Float
  flag      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  users     User[]
}

model User {
  id                            Int            @id @default(autoincrement())
  countryId                     Int?
  avatar                        String?
  email                         String?        @unique
  phoneNumber                   String?        @unique
  signUpMethod                  String?
  emailVerifiedAt               DateTime?
  phoneNumberVerifiedAt         DateTime?
  firstName                     String
  lastName                      String
  gender                        String?
  birthDay                      DateTime?
  status                        Int            @default(3)
  role                          String
  language                      String
  idCardFront                   String?
  idCardBack                    String?
  idCardStatus                  Int            @default(0)
  idCardRejectionMessage        String?
  idCardNumber                  String?
  idCardUploadedAt              DateTime?
  idCardModifiedAt              DateTime?
  driverLicenseFront            String?
  driverLicenseBack             String?
  driverLicenseRejectionMessage String?
  driverLicenseNumber           String?
  driverLicenseStatus           Int            @default(0)
  driverLicenseUploadedAt       DateTime?
  driverLicenseModifiedAt       DateTime?
  password                      String
  rating                        Float?
  createdAt                     DateTime       @default(now())
  blockedAt                     DateTime?
  updatedAt                     DateTime?      @updatedAt
  profileCompletedAt            DateTime?
  deletedAt                     DateTime?
  deletionReport                String?
  preferences                   Preference[]
  trips                         Trip[]
  travels                       Travel[]
  vehicles                      Vehicle[]
  historics                     Historic[]
  sendedNotifications           Publication[]
  receivedNotifications         Notification[]
  devices                       Device[]
  payments                      Payment[]
  refunds                    Refund[]
  passengerReviews               PassengerReview[]
  driverReviews DriverReview[]
  country                       Country?       @relation(fields: [countryId], references: [id])
  transfers           Transfer[]
}

model Device {
  id        String
  userId    Int
  platform  String
  token     String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@id([id, userId])
}

model Wallet {
  id          Int          @id
  currency    String       @default("XOF")
  balance     Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  deletedAt   DateTime?
  withdrawals Withdrawal[]
}

model Pricing {
  id              Int         @id @default(autoincrement())
  vehicleTypeName String
  lowerDistance   Int
  upperDistance   Int
  unitPrice       Float
  createdAt       DateTime    @default(now())
  updatedAt       DateTime?   @updatedAt
  deletedAt       DateTime?
  vehicleType     VehicleType @relation(fields: [vehicleTypeName], references: [name])
}

model Question {
  id          Int          @id @default(autoincrement())
  value       String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  deletedAt   DateTime?
  answers     Answer[]
  preferences Preference[]
}

model Answer {
  id          Int          @id @default(autoincrement())
  questionId  Int
  index       Int          @default(0)
  value       String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  deletedAt   DateTime?
  question    Question     @relation(fields: [questionId], references: [id])
  preferences Preference[]
}

model Preference {
  questionId Int
  answerId   Int
  answerIndex    Int
  userId     Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  deletedAt  DateTime?
  question   Question  @relation(fields: [questionId], references: [id])
  answer     Answer    @relation(fields: [answerId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@id([userId, questionId, answerId])
}

// model Configuration {
//   userId       Int
//   preferenceId Int
// value Boolean
//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime?  @updatedAt
//   user         User       @relation(fields: [userId], references: [id])
//   preference   Preference @relation(fields: [preferenceId], references: [id])

//   @@id([userId, preferenceId])
// }

model VehicleType {
  name        String    @id
  maxSeats    Int       @default(4)
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?
  vehicles    Vehicle[]
  pricings    Pricing[]
}

model Vehicle {
  id              Int         @id @default(autoincrement())
  userId          Int
  type            String
  model           String?
  color           String
  numberPlate     String      @unique
  registrationDoc String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime?   @updatedAt
  deletedAt       DateTime?
  trip            Trip[]
  user            User        @relation(fields: [userId], references: [id])
  vehicleType     VehicleType @relation(fields: [type], references: [name])
}

model Trip {
  id             Int       @id @default(autoincrement())
  userId         Int
  vehicleId      Int?
  seats          Int
  remainingSeats Int
  status         Int       @default(3)
  departureDate  String
  departureTime  String
  departureAddress String?
  arrivalAddress String?
  description    String?
  createdAt      DateTime  @default(now())
  canceledAt     DateTime?
  deletedAt      DateTime?
  cancelReason   String?
  startedAt      DateTime?
  finishedAt     DateTime?

  // stops Stop[]
  routes         Route[]
  user           User      @relation(fields: [userId], references: [id])
  vehicle        Vehicle?  @relation(fields: [vehicleId], references: [id])
  driverReviews DriverReview[]
  passengerReviews PassengerReview[]
  payments        Payment[]
  transfer        Transfer?
}

model Stop {
  id         Int       @id @default(autoincrement())
  routeId    Int
  principal  Boolean   @default(false)
  type       String
  longitude  Float
  latitude   Float
  address    String
  town       String?
  activateAt DateTime?
  route      Route?    @relation(fields: [routeId], references: [id])
  // trip   Trip   @relation(fields: [tripId], references: [id])
}

model Route {
  id             Int       @id @default(autoincrement())
  tripId         Int
  departureDate  String?
  departureTime  String?
  departureAddress String?
  arrivalAddress String?
  distance       Int
  duration       Int
  price          Int
  fees           Int
  principal      Boolean   @default(false)
  remainingSeats Int?
  deletedAt      DateTime?
  travels        Travel[]
  stops          Stop[]
  trip           Trip      @relation(fields: [tripId], references: [id])
}

model Travel {
  id              Int              @id @default(autoincrement())
  userId          Int
  routeId         Int
  seats           Int
  departureAddress String?
  arrivalAddress String?
  status          Int              @default(5) //5-active 4-waiting for start confirm 3-started 2-waiting for end confirm 1-finished 0-canceled -1-abadoned -2-contested
  description     String?
  createdAt       DateTime         @default(now())
  deletedAt       DateTime?
  startedAt       DateTime?
  finishedAt      DateTime?
  canceledAt      DateTime?
  canceledBy      String?
  cancelReason    String?
  notStartedReason String?
  notEndedReason String?
  // driverRating    Int?
  // passengerRating Int?
  rating          Float?           
  user            User             @relation(fields: [userId], references: [id])
  route           Route            @relation(fields: [routeId], references: [id])
  payment         Payment?
  refund          Refund?
  passengerReview PassengerReview?
  driverReview    DriverReview?
}

model PassengerReview {
  travelId  Int       @id
  userId Int
  tripId Int
  rating    Float?
  comment   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  travel    Travel    @relation(fields: [travelId], references: [id])
  trip      Trip @relation(fields: [tripId], references: [id])
 user      User @relation(fields: [userId], references: [id])  
}

model DriverReview {
  travelId  Int       @id
  tripId    Int 
  userId    Int
  rating    Float?
  comment   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  travel    Travel    @relation(fields: [travelId], references: [id])
  trip      Trip @relation(fields: [tripId], references: [id])
  user      User @relation(fields: [userId], references: [id])
}

model Transfer {
  tripId Int @id
  userId Int 
  amount Int
  commission Int
  createdAt      DateTime  @default(now())
  updatedAt DateTime?
  deletedAt      DateTime?
  trip      Trip @relation(fields: [tripId], references: [id])
  user      User @relation(fields: [userId], references: [id])
}

model Payment {
  id             String    @id
  travelId       Int       @unique
  tripId         Int 
  userId         Int
  method         String?
  amount         Int
  receivedAmount Int?
  reference      String?
  accessNumber   String?
  createdAt      DateTime  @default(now())
  deletedAt      DateTime?
  validatedAt    DateTime?
  status         Int       @default(2) //2-wating 1-success 0-canceled
  travel         Travel    @relation(fields: [travelId], references: [id])
  user           User      @relation(fields: [userId], references: [id])
  trip           Trip     @relation(fields: [tripId], references: [id])
}

model Withdrawal {
  id           String    @id
  walletId     Int
  method       String?
  transactionId String?
  amount       Int
  accessNumber String?
  createdAt    DateTime  @default(now())
  validatedAt  DateTime?
  deletedAt      DateTime?
  status       Int       @default(3) //2-wating 1-success 0-canceled
  wallet       Wallet    @relation(fields: [walletId], references: [id])
}

model Refund {
  id           String    @id
  travelId     Int @unique
  userId       Int
  method       String?
  transactionId String?
  amount       Int
  accessNumber String?
  createdAt    DateTime  @default(now())
  validatedAt  DateTime?
  deletedAt      DateTime?
  status       Int       @default(4) //available   //3-waiting 2-In process 1-success 0-canceled
  user         User      @relation(fields: [userId], references: [id])
  travel        Travel    @relation(fields: [travelId], references: [id])

}

model Status {
  number      Int       @id
  value       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?
}

model Historic {
  id        Int      @id @default(autoincrement())
  model     String
  rowId     Int
  action    String
  userId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Publication {
  id            Int            @id @default(autoincrement())
  title         String
  message       String
  icon          String?
  sound         String?
  picture       String?
  data          String?
  senderId      Int?
  createdAt     DateTime       @default(now())
  deletedAt     DateTime?
  user          User?          @relation(fields: [senderId], references: [id])
  notifications Notification[]
}

model Notification {
  publicationId Int
  receiverId    Int
  createdAt     DateTime    @default(now())
  deletedAt     DateTime?
  seenAt        DateTime?
  status        Int         @default(2)
  publication   Publication @relation(fields: [publicationId], references: [id])
  user          User        @relation(fields: [receiverId], references: [id])

  @@id([publicationId, receiverId])
}

model Newsletter {
  email     String    @id
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Setting {
  key         String    @id
  value       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?
}
